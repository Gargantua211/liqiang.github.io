{"meta":{"title":"博客","subtitle":"","description":"久有凌云志，重上井冈山","author":"昱东","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2024-09-15T15:09:01.380Z","updated":"2024-09-15T15:09:01.380Z","comments":true,"path":"2024/09/15/hello-world/","permalink":"http://example.com/2024/09/15/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"个人博客&主页搭建过程简要记录","slug":"个人博客主页搭建过程简要记录","date":"2024-09-15T04:00:00.000Z","updated":"2024-09-15T04:00:00.000Z","comments":true,"path":"2024/09/15/个人博客主页搭建过程简要记录/","permalink":"http://example.com/2024/09/15/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E7%AE%80%E8%A6%81%E8%AE%B0%E5%BD%95/","excerpt":"","text":"本站借助Hexo搭建，并托管在GitHub。作为本站搭建过程的记录，遂成为本站发表的第一篇文章。 环境准备篇幅有限，安装Git、注册GitHub、生成ssh密钥并配置到GitHub，这些基础步骤本文不再说明。 安装nodejs下载地址：https://nodejs.org/en/在本地磁盘D新建了一个文件夹 nodejs，安装在这个文件夹里。检验是否安装成功：可以用 node -v 和 npm -v 命令检查版本。 设置npm在安装全局模块时的路径 在 nodejs 文件夹下新建文件夹 node_cache、node_global。并在cmd中执行命令： 12npm config set prefix &quot;D:\\nodejs\\node_global&quot;npm config set cache &quot;D:\\nodejs\\node_cache&quot; 设置环境变量: 新建一个变量名为“NODE_PATH”，值为“D:\\nodejs\\node_global\\node_modules” 编辑Path，新建一个“D:\\nodejs\\node_global” 安装Hexo安装Hexo之前，先在本地建立一个文件夹 Blog（名称任意），作为站点根目录，以后的文章都在这个Blog目录中创建和暂存，并发布到GitHub中托管。 进入 Blog 文件夹，打开 Git Bush Here，输入npm命令安装Hexo： 1npm install -g hexo-cli 安装完成后，输入 hexo init 命令初始化博客： 1hexo init 然后输入 hexo g 本地静态部署 1hexo g 输入 hexo s 命令可以查看部署在本地的端口 1hexo s 可以看到输出了：http://localhost:4000进入 http://localhost:4000 就能看到一个默认的、初始的网页。 但这样仅仅是本机上部署成功，接下来需要发布到GitHub，以及对这个网页更换主题、编写文章并发布。 在后文中，都会将上述命令组合使用，节省篇幅。 这里补充一下各条命令的作用： 清除旧数据 1hexo clean 这个命令会清除掉之前旧的网页数据，即站点根目录下的public文件夹 生成新的网页 1hexo g 注意：每次修改文章后，都要执行上述两条命令，清除掉旧的数据，然后重新生成页面。 本地开启服务器，预览一下文章（可选） 1hexo s 部署到Github 1hexo d 创建Github仓库在GitHub上创立一个仓库，名称格式为：xxx.github.io。 其中xxx必须是当前Github账号的用户名。如我的用户名是： liqiang995，那么仓库名：liqiang995.github.io 将Hexo初始静态网页部署到GitHub关联GitHub进入Blog 文件夹，打开 _config.yml 文件，填上如下内容： 123456# 注意yml语法，键和值之间除了冒号，还有一个空格deploy: type: git repository: git@github.com:liqiang995/liqiang995.github.io.git #自己的仓库地址，可以是ssh、https branch: main #自己仓库的分支，注意默认主分支是main，不再是master 安装Hexo发布Git插件还是Blog 文件夹，打开 Git Bash Here，安装Hexo发布Git插件： 1npm install hexo-deployer-git --save Hexo生成网站静态文件、发布到GitHub仍然是在Git Bash 窗口中，分别输入以下三条命令： 123hexo clean #清除缓存文件 db.json 和已生成的静态文件 publichexo g #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d #部署到设定的远程仓库(hexo deploy 的缩写) 完成以后，（会有几分钟内的延迟）打开浏览器，输入 https://liqiang995.github.io 就可以打开和上述相同的默认的网页，不过现在发布在公网，而不是在本地。 设置主题由 hexo init 初始化出来的网页，主题是默认的。但其实Hexo开源主题非常多。 Hexo 10款好看的主题｜新手建站必备！ 不管使用哪个主题，都需要找到这个主题的仓库地址，将它clone到我们的博客文件夹中。 在此之前 检查并安装Hexo 搜索依赖： 1npm i hexo-generator-json-content 安装 Stylus 渲染器： 1npm i hexo-renderer-stylus 以本站使用 volantis 主题为例，找到由volantis提供的文档：开始使用 - Volantis，提供了两种方式： 直接使用npm命令安装(要求 Hexo 5.0.2 及以上)1npm i hexo-theme-volantis 通过GitHub地址拉取（本文采用的方式）1git clone https://github.com/volantis-x/hexo-theme-volantis themes/volantis 还是在Blog文件夹，打开Git Bash，输入上述GitHub地址，拉取到目录 Blog&#x2F;themes&#x2F;volantis 还是在Blog文件夹，打开 _config.yml 文件，修改主题为volantis 12345678910111213# Sitetitle: &#x27;&#x27; #标题subtitle: &#x27;&#x27;description: &#x27;&#x27; #简介keywords:author: &#x27;&#x27; #作者language: zh-CN #主题语言timezone: Asia/Shanghai #时区# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: volantis #主题改为volantis 确定主题后，还是需要对这主题做一些个性化修改，如背景、标题、个人联系方式及链接…… 这些内容，就要去到这个主题下的 _config.yml 文件做修改了。如 themes\\volantis\\_config.yml。 但也可以在Blog目录下创建 _config.volantis.yml（命令格式都是 _config.{theme_name}.yml），它会和themes\\volantis\\_config.yml文件中内容互补，但_config.volantis.yml优先级更高。 完成修改后，重新发布 12# 本地预览hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 12# 部署到远程hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 创建文章并发布创建新文章进入站点根目录Blog，使用如下命令创建新文章： 1hexo new &lt;title&gt; 执行后，Hexo会在 Blog&#x2F;source&#x2F;_posts目录下创建一篇以 &lt;title&gt;命名新的文章，接下来在这篇文章里使用 MarkDown 语法编写文章即可。 编辑文章内容打开 Hexo 创建的文章可以看到，注意开头有一段以”- - -“包括起来的内容，这是前置信息，用于给 Hexo 渲染该 md 文档，除了这三项，还有很多的配置项可以自己添加 配置项 含义 title 文章标题 date 文章创建日期 updated 更新日期 comments 文章评论[true 表示开启评论] tags 文章标签 categories 文章分类 keywords 文章关键字 参数“categories”表示分类，一篇文章只能属于一个分类，如果添加了多个分类，则下一个分类为子分类。添加分类的格式如下： 123categories:- 分类- 子分类 参数“tags”表示标签，一篇文章可以有多个标签。添加标签的格式如下： 123tags:- 标签1- 标签2 在”- - -“以后的区域，都可以支持大多数Markdown 语法，编写正文。 重新部署到远程GitHub 文章写好之后，回到 Blog 文件夹，打开Git Bash， 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 绑定域名托管在GitHub后，地址一般是 xxx.github.io，并不容易记住，所以绑定到已购买的域名上。 添加域名解析 在所购买域名的网站上，添加一条解析记录，解析到 xxx.github.io 对应的ip地址。 ip地址使用 ping xxx.github.io获取，经测试目前ping出来的地址为ipv6。那么添加解析时要指定ipv6。 添加CNAME文件 找到Blog 文件夹里的 source 文件夹，添加CNAME文件。（不要用windows直接创建文件） 可以在 Git Bash 中使用命令touch CNAME 创建，再vim CNAME打开后写上域名，如本站地址： 1blog.revali.site 回到 Blog 文件夹，打开Git Bash， 重新部署到远程GitHub 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 打开GitHub，检查CNAME文件是否已经在项目中、是否创建了 Customer domain。 创建成功，以后就能通过新的域名访问了。","categories":[{"name":"杂记","slug":"杂记","permalink":"http://example.com/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://example.com/tags/node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}],"author":"昱东"}],"categories":[{"name":"杂记","slug":"杂记","permalink":"http://example.com/categories/%E6%9D%82%E8%AE%B0/"}],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://example.com/tags/node-js/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}